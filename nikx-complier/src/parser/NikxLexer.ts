// Generated from antlr/Nikx.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class NikxLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly BooleanLiteral = 3;
	public static readonly NumberLiteral = 4;
	public static readonly StringLiteral = 5;
	public static readonly CharacterData = 6;
	public static readonly Identifier = 7;
	public static readonly VAR = 8;
	public static readonly FUN = 9;
	public static readonly SEMICOLON = 10;
	public static readonly COMMA = 11;
	public static readonly ASSIGN = 12;
	public static readonly LPAREN = 13;
	public static readonly RPAREN = 14;
	public static readonly LBRACE = 15;
	public static readonly RBRACE = 16;
	public static readonly LT = 17;
	public static readonly GT = 18;
	public static readonly SLASH = 19;
	public static readonly WS = 20;
	public static readonly COMMENT = 21;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "BooleanLiteral", "NumberLiteral", "StringLiteral", "EscapeSequence", 
		"CharacterData", "Identifier", "VAR", "FUN", "SEMICOLON", "COMMA", "ASSIGN", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LT", "GT", "SLASH", "Letter", 
		"Digit", "WS", "COMMENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'</'", "'/>'", undefined, undefined, undefined, undefined, 
		undefined, "'var'", "'fun'", "';'", "','", "'='", "'('", "')'", "'{'", 
		"'}'", "'<'", "'>'", "'/'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "BooleanLiteral", "NumberLiteral", "StringLiteral", 
		"CharacterData", "Identifier", "VAR", "FUN", "SEMICOLON", "COMMA", "ASSIGN", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LT", "GT", "SLASH", "WS", "COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(NikxLexer._LITERAL_NAMES, NikxLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return NikxLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(NikxLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Nikx.g4"; }

	// @Override
	public get ruleNames(): string[] { return NikxLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return NikxLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return NikxLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return NikxLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x17\x9E\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03" +
		"\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
		"\x03\x04\x05\x04C\n\x04\x03\x05\x06\x05F\n\x05\r\x05\x0E\x05G\x03\x05" +
		"\x03\x05\x06\x05L\n\x05\r\x05\x0E\x05M\x05\x05P\n\x05\x03\x06\x03\x06" +
		"\x03\x06\x07\x06U\n\x06\f\x06\x0E\x06X\v\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\b\x06\b`\n\b\r\b\x0E\ba\x03\t\x03\t\x03\t\x03\t\x07\t" +
		"h\n\t\f\t\x0E\tk\v\t\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03" +
		"\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03" +
		"\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03" +
		"\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x06\x18\x8E\n\x18\r\x18\x0E" +
		"\x18\x8F\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x07\x19\x98\n" +
		"\x19\f\x19\x0E\x19\x9B\v\x19\x03\x19\x03\x19\x02\x02\x02\x1A\x03\x02\x03" +
		"\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\x02\x0F\x02\b\x11\x02" +
		"\t\x13\x02\n\x15\x02\v\x17\x02\f\x19\x02\r\x1B\x02\x0E\x1D\x02\x0F\x1F" +
		"\x02\x10!\x02\x11#\x02\x12%\x02\x13\'\x02\x14)\x02\x15+\x02\x02-\x02\x02" +
		"/\x02\x161\x02\x17\x03\x02\t\x06\x02\f\f\x0F\x0F$$^^\n\x02$$))^^ddhhp" +
		"pttvv\x06\x02>>@@}}\x7F\x7F\x04\x02C\\c|\x03\x022;\x05\x02\v\f\x0F\x0F" +
		"\"\"\x04\x02\f\f\x0F\x0F\x02\xA6\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02" +
		"\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02" +
		"\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
		"\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02" +
		"\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02" +
		"\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03" +
		"\x02\x02\x02\x033\x03\x02\x02\x02\x056\x03\x02\x02\x02\x07B\x03\x02\x02" +
		"\x02\tE\x03\x02\x02\x02\vQ\x03\x02\x02\x02\r[\x03\x02\x02\x02\x0F_\x03" +
		"\x02\x02\x02\x11c\x03\x02\x02\x02\x13l\x03\x02\x02\x02\x15p\x03\x02\x02" +
		"\x02\x17t\x03\x02\x02\x02\x19v\x03\x02\x02\x02\x1Bx\x03\x02\x02\x02\x1D" +
		"z\x03\x02\x02\x02\x1F|\x03\x02\x02\x02!~\x03\x02\x02\x02#\x80\x03\x02" +
		"\x02\x02%\x82\x03\x02\x02\x02\'\x84\x03\x02\x02\x02)\x86\x03\x02\x02\x02" +
		"+\x88\x03\x02\x02\x02-\x8A\x03\x02\x02\x02/\x8D\x03\x02\x02\x021\x93\x03" +
		"\x02\x02\x0234\x07>\x02\x0245\x071\x02\x025\x04\x03\x02\x02\x0267\x07" +
		"1\x02\x0278\x07@\x02\x028\x06\x03\x02\x02\x029:\x07v\x02\x02:;\x07t\x02" +
		"\x02;<\x07w\x02\x02<C\x07g\x02\x02=>\x07h\x02\x02>?\x07c\x02\x02?@\x07" +
		"n\x02\x02@A\x07u\x02\x02AC\x07g\x02\x02B9\x03\x02\x02\x02B=\x03\x02\x02" +
		"\x02C\b\x03\x02\x02\x02DF\x05-\x17\x02ED\x03\x02\x02\x02FG\x03\x02\x02" +
		"\x02GE\x03\x02\x02\x02GH\x03\x02\x02\x02HO\x03\x02\x02\x02IK\x070\x02" +
		"\x02JL\x05-\x17\x02KJ\x03\x02\x02\x02LM\x03\x02\x02\x02MK\x03\x02\x02" +
		"\x02MN\x03\x02\x02\x02NP\x03\x02\x02\x02OI\x03\x02\x02\x02OP\x03\x02\x02" +
		"\x02P\n\x03\x02\x02\x02QV\x07$\x02\x02RU\x05\r\x07\x02SU\n\x02\x02\x02" +
		"TR\x03\x02\x02\x02TS\x03\x02\x02\x02UX\x03\x02\x02\x02VT\x03\x02\x02\x02" +
		"VW\x03\x02\x02\x02WY\x03\x02\x02\x02XV\x03\x02\x02\x02YZ\x07$\x02\x02" +
		"Z\f\x03\x02\x02\x02[\\\x07^\x02\x02\\]\t\x03\x02\x02]\x0E\x03\x02\x02" +
		"\x02^`\n\x04\x02\x02_^\x03\x02\x02\x02`a\x03\x02\x02\x02a_\x03\x02\x02" +
		"\x02ab\x03\x02\x02\x02b\x10\x03\x02\x02\x02ci\x05+\x16\x02dh\x05+\x16" +
		"\x02eh\x05-\x17\x02fh\x07a\x02\x02gd\x03\x02\x02\x02ge\x03\x02\x02\x02" +
		"gf\x03\x02\x02\x02hk\x03\x02\x02\x02ig\x03\x02\x02\x02ij\x03\x02\x02\x02" +
		"j\x12\x03\x02\x02\x02ki\x03\x02\x02\x02lm\x07x\x02\x02mn\x07c\x02\x02" +
		"no\x07t\x02\x02o\x14\x03\x02\x02\x02pq\x07h\x02\x02qr\x07w\x02\x02rs\x07" +
		"p\x02\x02s\x16\x03\x02\x02\x02tu\x07=\x02\x02u\x18\x03\x02\x02\x02vw\x07" +
		".\x02\x02w\x1A\x03\x02\x02\x02xy\x07?\x02\x02y\x1C\x03\x02\x02\x02z{\x07" +
		"*\x02\x02{\x1E\x03\x02\x02\x02|}\x07+\x02\x02} \x03\x02\x02\x02~\x7F\x07" +
		"}\x02\x02\x7F\"\x03\x02\x02\x02\x80\x81\x07\x7F\x02\x02\x81$\x03\x02\x02" +
		"\x02\x82\x83\x07>\x02\x02\x83&\x03\x02\x02\x02\x84\x85\x07@\x02\x02\x85" +
		"(\x03\x02\x02\x02\x86\x87\x071\x02\x02\x87*\x03\x02\x02\x02\x88\x89\t" +
		"\x05\x02\x02\x89,\x03\x02\x02\x02\x8A\x8B\t\x06\x02\x02\x8B.\x03\x02\x02" +
		"\x02\x8C\x8E\t\x07\x02\x02\x8D\x8C\x03\x02\x02\x02\x8E\x8F\x03\x02\x02" +
		"\x02\x8F\x8D\x03\x02\x02\x02\x8F\x90\x03\x02\x02\x02\x90\x91\x03\x02\x02" +
		"\x02\x91\x92\b\x18\x02\x02\x920\x03\x02\x02\x02\x93\x94\x071\x02\x02\x94" +
		"\x95\x071\x02\x02\x95\x99\x03\x02\x02\x02\x96\x98\n\b\x02\x02\x97\x96" +
		"\x03\x02\x02\x02\x98\x9B\x03\x02\x02\x02\x99\x97\x03\x02\x02\x02\x99\x9A" +
		"\x03\x02\x02\x02\x9A\x9C\x03\x02\x02\x02\x9B\x99\x03\x02\x02\x02\x9C\x9D" +
		"\b\x19\x02\x02\x9D2\x03\x02\x02\x02\x0E\x02BGMOTVagi\x8F\x99\x03\b\x02" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!NikxLexer.__ATN) {
			NikxLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(NikxLexer._serializedATN));
		}

		return NikxLexer.__ATN;
	}

}

